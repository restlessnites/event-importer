.PHONY: install run-cli run-api run-mcp help import db-stats validate clean

# Default target
.DEFAULT_GOAL := help

##@ Installation & Setup
install: ## Run the interactive installer
	@if command -v python3 >/dev/null 2>&1; then \
		PYTHON_CMD=python3; \
	elif command -v python >/dev/null 2>&1; then \
		PYTHON_CMD=python; \
	else \
		echo "Error: python3 or python command not found. Please install Python."; \
		exit 1; \
	fi; \
	\
	MIN_PYTHON_VERSION="3.11"; \
	REQUIRED_PYTHON_VERSION="3.11.9"; \
	CURRENT_PYTHON_VERSION=$$($$PYTHON_CMD -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")'); \
	\
	if [ -z "$$CURRENT_PYTHON_VERSION" ] || [ "$$(printf '%s\n' "$$MIN_PYTHON_VERSION" "$$CURRENT_PYTHON_VERSION" | sort -V | head -n1)" != "$$MIN_PYTHON_VERSION" ]; then \
		if command -v pyenv >/dev/null 2>&1; then \
			echo "Warning: Your Python version ($$CURRENT_PYTHON_VERSION) is older than required ($$MIN_PYTHON_VERSION)."; \
			echo "However, 'pyenv' is installed on your system."; \
			printf "Would you like to automatically install Python %s and set it for this project? (y/N) " "$$REQUIRED_PYTHON_VERSION"; \
			read -r response; \
			if [ "$$response" = "y" ] || [ "$$response" = "Y" ]; then \
				echo "Attempting to install Python $$REQUIRED_PYTHON_VERSION with pyenv. This might take a while..."; \
				if pyenv install --skip-existing $$REQUIRED_PYTHON_VERSION; then \
					echo "Python $$REQUIRED_PYTHON_VERSION installed successfully."; \
					pyenv local $$REQUIRED_PYTHON_VERSION; \
					echo "Set local python version to $$REQUIRED_PYTHON_VERSION for this project."; \
					echo "\nContinuing installation with the new Python version..."; \
					pyenv exec python install.py; \
					exit 0; \
				else \
					echo "Error: Failed to install Python $$REQUIRED_PYTHON_VERSION with pyenv."; \
					echo "Please check pyenv's error messages above and ensure you have the required build dependencies."; \
					exit 1; \
				fi; \
			else \
				echo "Automatic installation declined."; \
				echo "Please manually install Python $$MIN_PYTHON_VERSION+ (e.g., 'pyenv install $$REQUIRED_PYTHON_VERSION') and set it for this project (e.g., 'pyenv local $$REQUIRED_PYTHON_VERSION')."; \
				exit 1; \
			fi; \
		else \
			echo "Error: This project requires Python $$MIN_PYTHON_VERSION or newer, but 'pyenv' was not found on your system." >&2; \
			echo "We recommend using pyenv to manage Python versions." >&2; \
			if [ "$$(uname)" = "Darwin" ]; then \
				if command -v brew >/dev/null 2>&1; then \
					echo "\nTo install pyenv on macOS, run this command:" >&2; \
					echo "  brew install pyenv" >&2; \
				else \
					echo "\nTo install pyenv on macOS, you first need Homebrew. See https://brew.sh/" >&2; \
				fi; \
			elif [ "$$(uname)" = "Linux" ]; then \
				echo "\nTo install pyenv on Linux, you can use the official installer:" >&2; \
				echo "  curl https://pyenv.run | bash" >&2; \
				echo "After installation, follow the instructions to update your shell profile." >&2; \
			fi; \
			echo "\nOnce pyenv is installed, please re-run 'make install'." >&2; \
			exit 1; \
		fi; \
	fi; \
	\
	$$PYTHON_CMD install.py


##@ Running
run-cli: ## Run the CLI interface (pass args with ARGS="...")
	@uv run --active event-importer $(ARGS)

run-api: ## Start the HTTP API server
	@uv run --active event-importer api

run-mcp: ## Start the MCP server
	@uv run --active event-importer mcp

import: ## Import an event from a URL (pass url with URL="...")
	@uv run --active event-importer import $(URL)

db-stats: ## Show database statistics
	@uv run --active event-importer stats


##@ Validation
validate: ## Validate the installation
	@uv run --active event-importer validate


##@ Cleanup
clean: ## Clean up cache artifacts
	@rm -rf .ruff_cache
	@rm -rf .mypy_cache
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true


##@ Help
help: ## Show this help message
	@echo "RESTLESS / EVENT IMPORTER"
	@echo ""
	@echo "Usage: make [target]"
	@awk 'BEGIN {FS = ":.*?## |^##@ "} \
		/^(##@|([a-zA-Z0-9_-]+:.*?##))/ { \
			if ($$1 == "") { \
				printf "\n\033[1;33m%s\033[0m\n", $$2; \
			} else { \
				printf "  \033[36m%-29s\033[0m %s\n", $$1, $$2; \
			} \
		}' $(MAKEFILE_LIST) 